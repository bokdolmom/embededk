
public class _2변수데이터타입 {

	public class _2변수_데이터타입 {

		public static void main(String[] args) {
			// TODO Auto-generated method stub

			/*변수(variable): 다양한 메모리(값) 를 저장하기 위한 공간에 이름을 붙인 것.
			 값 따로 메모리 따로?				 
					 
		    변수는 ①선언, ②초기화, ③할당, ④소멸의 생명주기를 가짐.
		    
		    변수는 값이 있는곳의 주소값이 저장됨.
		    
			자바에서는 변수를 사용하기 전에 반드시 선언을 해야 함. COMPILE 언어. 동적언어.

			
			1.선언:①변수의 타입(메모리의 크기, 종류(정수,실수,문자,불리언) )과  ②이름을 정하는 것. 아직 값은 알 수 없음.
			
			2.초기화: 해당 공간에 기존에 있던 정보를 초기화 시키는 것.
			
			3.할당: 초기화 시킨 공간에 임의의 값을 할당 하는 것. 
			 
			4.소멸: 변수가 차지하던 메모리 공간을 해제하는 것.
			
			int(4byte 정수) i; 라는 변수는 끝까지 int. 타입이 한번 정해지면 바뀌지 않음.
			
			자바의 데이터 기본타입 8가지
			byte     -2^7  ~  2^7
			short  -2^15 ~ 2^15
			int      -2^31 ~ 2^31 
			long 	  -2^ 63~ 2^63	
			float   4byte 이지만 8byte long 보다 표현할 수 있는 크기가 더 큼. ?의 ?^ 이런식으로 표현하기 때문에. 실수형 변수는 메모리의 한계가 있기때문에 정확한 수치 표현이 어렵다.
			double 
			char
			boolean
			
			*값의 유효범위 double > float > long > int >  short > byte
			  4byte 이지만 8byte long 보다 표현할 수 있는 크기가 더 큼. ?의 ?^ 이런식으로 표현하기 때문에. 실수형 변수는 메모리의 한계가 있기때문에 정확한 수치 표현이 어렵다.
			  
			bit 는 정보의 최소단위 0,1 
			byte 는 정보 전송의 최소단위. 정보를 전송할 때 최소 8개씩 한 묶음으로 전송하기 때문에. 정수를 표현.
			
			바이트 = |부호비트 | | | | | | | |   ->   부호비트(음수,양수) 1개 데이터비트 7개 
			
			address 메모리 주소 : C 언어를 사용하던 시절에 개발자가 사소한 실수로 메모리를 건드리면 블루스크린 뜨면서 다운됨. 
											그래서 메모리 주소에 직접 건드리지 못하게 하자.
			reference(메모리 주소 참조) :메모리를 직접 건드리진 못하고 간접적으로 이용. 실제 주소값은 감추고. 그 값에 해당하는 다른 값을 만듬.
			
										원래주소         참조
											a      ->    a'  참조를 통해 주소에 접근 할 수 있지만, 주소가 무엇인지는 알 수없음. Hash 알고리즘이 만듬.
										
										주소를 가지고 주소에 대한 참조값을 만듬. 주소의 안전성을 높임. 주소를 직접 건드리면 위험하기 때문에.
										참조값을 갖는 변수들을 전부 다 참조형 변수 라고 함.
											
											실명  ->   아이디
											a     ->    a'     아이디를 통해 나에게 접근할 수 있으나, 이름을 알 수는 없음.
											
			
			참조값:
			
			 
		*/
		}}}